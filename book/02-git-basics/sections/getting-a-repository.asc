[[_getting_a_repo]]
=== Ein Git Repository anlegen

Sie haben zwei Möglichkeiten, ein Git Repository auf Ihrem Rechner anzulegen.
Sie können entweder ein existierendes Projekt oder Verzeichnis in ein neues Git Repository importieren.
Oder Sie können ein existierendes Repository von einem Server auf den eigenen Rechner klonen.

==== Ein existierendes Verzeichnis als Git Repository initialisieren

Wenn Sie ein bestehendes Projekt in Zukunft versionieren möchten, können Sie dazu in das Hauptverzeichnis des Projekts wechseln und den folgenden Befehl ausführen:

[source,console]
----
$ git init
----

Der Befehl erzeugt ein Unterverzeichnis `.git`, in dem alle relevanten Git Repository Daten enthalten sind, also ein Git Repository Grundgerüst.
Zu diesem Zeitpunkt werden noch keine Dateien in Git versioniert. (Im Kapitel <<_git_internals>> finden Sie weitere Informationen, welche Dateien im `.git` Verzeichnis enthalten sind und was ihre Aufgabe ist.)(((Git Befehle, init)))

Wenn Sie bereits existierende Dateien versionieren möchten (und es sich nicht nur um ein leeres Verzeichnis handelt), dann sollten Sie den aktuellen Stand in einem initialen Commit einchecken.
Mit dem Befehl `git add` legen Sie fest, welche Dateien versioniert werden sollen und mit dem Befehl `git commit` erzeugen Sie einen neuen Commit:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Wir werden gleich noch einmal genauer auf diese Befehle eingehen. Im Moment ist nur wichtig, dass Sie verstehen, dass Sie jetzt ein Git Repository erzeugt und einen ersten Commit angelegt haben.

[[_git_cloning]]
==== Ein existierendes Repository klonen

Wenn Sie eine Kopie eines existierenden Git Repositorys anlegen wollen – z. B. um an einem Projekt mitzuarbeiten – können Sie den Befehl `git clone` verwenden.
Wenn Sie bereits Erfahrung mit einem anderen VCS System, wie Subversion, gesammelt haben, fällt Ihnen bestimmt sofort auf, dass der Befehl `clone` und nicht etwa `checkout` lautet.
Dies ist ein wichtiger Unterschied, den Sie unbedingt verstehen sollten — Anstatt nur eine einfache Arbeitskopie vom Projekt zu erzeugen, lädt Git nahezu alle Daten, die der Server bereithält, auf den lokalen Rechner.
Mit `git clone` wird jede einzelne Version jeder einzelnen Datei, also die gesamte Historie eines Projekts auf den Rechner heruntergeladen.
Wenn ein Repository auf einem Server einmal beschädigt wird (z.B. weil die Festplatte beschädigt wird), kann man tatsächlich jeden beliebigen Klon des Repositorys verwenden, um das Repository auf dem Server wieder in dem Zustand wiederherzustellen, in dem es sich befand, als es geklont wurde (es kann passieren, dass man einige auf dem Server vorhandene Hooks verliert, aber alle versionierten Daten bleiben erhalten. Im Kapitel <<_git_on_the_server>> erfahren Sie dazu nähere Details).

Sie können ein Repository mit dem Befehl `git clone [url]` klonen.(((Git Befehle, clone)))
Um beispielsweise das Repository der linkbaren Git Bibliothek libgit2 zu klonen, führen Sie den folgenden Befehl aus:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Git legt dann ein Verzeichnis `libgit2` an, initialisiert in diesem ein `.git` Verzeichnis, lädt alle Daten des Repositorys herunter, und checkt eine Arbeitskopie der aktuellsten Version aus.
Wenn Sie in das neue `libgit2` Verzeichnis wechseln, finden Sie dort die Projektdateien und können gleich mit ihnen loslegen.
Wenn Sie das Repository in ein Verzeichnis mit einem anderen Namen als `libgit2` klonen möchten, können Sie das wie folgt durchführen:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Dieser Befehl tut das gleiche wie der vorhergehende, aber das Zielverzeichnis lautet diesmal `mylibgit`.

Git unterstützt eine Reihe unterschiedlicher Übertragungsprotokolle.
Das vorhergehende Beispiel verwendet das `https://` Protokoll, aber Ihnen können auch die Angaben `git://` oder `user@server:path/to/repo.git` begegnen, welche das SSH-Transfer-Protokoll verwenden.
Im Kapitel <<_git_on_the_server>> gehen wir auf die verfügbaren Optionen und deren Vor- und Nachteile ein, die ein Server hat, um Zugriff auf ein Git Repository zu ermöglichen.
